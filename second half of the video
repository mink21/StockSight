x_train = np.reshape (x_train, (x_train.shape [0], x_train.shape[1], 1))
Build The Model
model = Sequential()
model.add (LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add (Dropout (0.2))
model.add (LSTM(units=50, return_sequences=True))
model.add (Dropout (0.2))
model.add(LSTM(units=50))
model.add (Dropout (0.2))
model.add (Dense (units=1)) # Prediction of the next closing value
model.compile(optimizer='adam', Loss='mean_squared_error')
model.fit(x_train, y_train, epochs=25, batch_size=32)

' ' ' Test The Model Accuracy on Existing Data ' ' ' 
# Load Test Data
test_start = dt.datetime (2020 1,1)
test_end = dt.datetime.now()

test_data = web.DataReader(company, 'yahoo', test_start, test_end)
actual_prices = test_data('Close').values

total_dataset = pd.concat((data['Close'], test_data['Close']), axis=0)

total_dataset = pd.concat((data['Close'], test_data[ 'Close']), axis=0)
model_inputs = total_dataset[len(total_dataset) - len(test_data)
prediction_days:1.valu
model_inputs = model_inputs.reshape(-1, 1)
model_inputs = scaler.transform (model_inputs)

# Make Predictions on Test Data
x_test = []

for x in range (prediction_days, Len (model_inputs)):
x_test.append (model_inputs [x-prediction_days:x, 0])
X_test = np.array (x_test)
x_test = np.reshape (x_test, (x_test.shape[0], x_test.shape [1], 1))
predicted_prices = model.predict(x_test)
predicted_prices = scaler.inverse_transform (predicted_prices)

# Plot The Test Predictions
plt.plot(actual_prices, color="black", Label=f"Actual {company} Price")
plt.plot(predicted_prices, color='green', label=f"Predicted (company} Price")
plt.title(f"{company} Share Price")
plt.xlabel('Time')
plt.ylabel(f{company} Share Price')
plt.legend ()
plt.show()

real_data = [model_inputs[Len (model_inputs) + 1 - prediction_days:Len (model_inputs+1), 6
real_data = np.array (real data)
real_data = np.reshape (real_data, (real_data.shape[0], real_data.shape [1],1))
prediction = model.predict(real_data)
prediction = scaler.inverse_transform(prediction)
print(f"Prediction: {prediction}")


